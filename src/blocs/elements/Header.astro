---
import BlueButton from "@components/BlueButton.astro";
import { Icon } from "astro-icon/components";
---

<header
	class="header"
	aria-label="Header"
>
	<div class="header__wrapper wrapper">
		<a
			class="header__logo"
			href="/"
			title="Home"
			aria-label="Home"
			data-js-header-home-button=""
		>
			<Icon
				name="logo"
				width={106}
				height={36}
				role="img"
				aria-label="Whirl Logo"
			/></a
		>
		<button
			type="button"
			class="header__burger visible-mobile"
			title="Open menu"
			aria-label="Open menu"
			aria-controls="header-overlay"
			data-js-header-button=""
		>
			<span class="header__burger-line"></span>
			<span class="header__burger-line"></span>
			<span class="header__burger-line"></span>
		</button>
		<div
			class="header__overlay"
			id="header-overlay"
			aria-label="Header menu"
			data-js-header-overlay=""
		>
			<nav aria-label="Header navigation">
				<ul class="header__list">
					<li><a href="#!">Features</a></li>
					<li><a href="#!">Pricing</a></li>
					<li><a href="#!">Integrations</a></li>
					<li><a href="#!">Learn</a></li>
				</ul>
			</nav>
			<div class="header__buttons">
				<a
					class="header__buttons-link"
					href="#!"
					>Sign in</a
				>
				<BlueButton
					url="#!"
					isSmall="true"
					>Book a demo</BlueButton
				>
			</div>
		</div>
	</div>
</header>

<style lang="scss">
	@use "@styles/helpers" as *;

	.header {
		position: fixed;
		z-index: 999;
		width: 100%;
		border-bottom: 1px solid var(--color-white-400);
		padding-block: 20px;
		background-color: var(--color-white-100);

		&__wrapper {
			display: flex;
			justify-content: space-between;
			align-items: center;
			column-gap: 36px;
		}

		&__logo {
			display: inline-flex;
		}

		&__overlay {
			display: flex;
			justify-content: space-between;
			align-items: center;
			gap: 20px;
			width: 100%;
			background-color: var(--color-white-100);
			line-height: 1.6;
			transition-duration: var(--transition-duration);

			@include font-variable(18, 15, 14);

			@include mobile {
				position: fixed;
				inset: 0;
				z-index: 99;
				overflow-y: scroll;
				justify-content: center;
				font-size: 28px;
				flex-direction: column;

				&:not(.is-active) {
					transform: translateX(100%);
				}
			}
		}

		&__list {
			display: inline-flex;
			gap: 24px;
			color: var(--color-black-800);
			text-align: center;

			@include mobile {
				flex-direction: column;
			}
		}

		&__buttons {
			display: inline-flex;
			align-items: center;
			gap: 30px;

			@include mobile {
				flex-direction: column;
			}

			&-link {
				color: var(--color-blue-600);
			}
		}

		&__burger {
			position: relative;
			z-index: 100;
			display: inline-flex;
			flex-direction: column;
			justify-content: space-between;
			padding: 8.5px 4.25px;

			@include square(36px);

			&-line {
				width: 100%;
				height: 2px;
				border-radius: 16px;
				background-color: var(--color-black-900);
				transition-duration: var(--transition-duration);

				&:last-child {
					align-self: flex-end;
					width: 60%;
				}
			}

			&.is-active .header__burger-line {
				&:first-child {
					transform: rotate(45deg) translateY(-0.28em) translateX(0.1em);
					transform-origin: 0;
				}

				&:nth-child(2) {
					transform: rotate(-43deg);
				}

				&:last-child {
					width: 0;
				}
			}
		}
	}
</style>

<script>
	import debounce from "../../scripts/utils/debounce";

	var isOpen = false;
	var noTransition = false;

	var overlayElement: any;
	var buttonElement: any;
	var externalElements: any;

	window.addEventListener("load", () => {
		requestAnimationFrame(() => {
			overlayElement = document.querySelector("[data-js-header-overlay]");
			buttonElement = document.querySelector("[data-js-header-button]");
			externalElements = [
				document.querySelector("[data-js-main]"),
				document.querySelector("[data-js-footer]"),
				document.querySelector("[data-js-header-home-button]"),
			];
			matchDevice();
			bindEvents();
		});
	});

	function matchDevice() {
		if (window.matchMedia("(max-width: 767px)").matches) {
			document.documentElement.addEventListener("keydown", handleEsc);
			buttonElement.removeAttribute("hidden");
			overlayElement.setAttribute("tabindex", "-1");
			overlayElement.setAttribute("role", "dialog");
			overlayElement.setAttribute("aria-modal", "true");
			overlayElement.setAttribute("inert", "");
		} else {
			document.documentElement.removeEventListener("keydown", handleEsc);
			buttonElement.setAttribute("hidden", "");
			overlayElement.removeAttribute("tabindex");
			overlayElement.removeAttribute("role");
			overlayElement.removeAttribute("aria-modal");
			overlayElement.removeAttribute("inert");
		}
	}

	var handleEsc = (e: any) => {
		if (e.key === "Escape") {
			onButtonClick();
		}
	};

	var onButtonClick = () => {
		isOpen = !isOpen;
		document.documentElement.classList.toggle("is-lock");
		buttonElement.classList.toggle("is-active");
		overlayElement.classList.toggle("is-active");
		buttonElement.setAttribute("title", isOpen ? "Close menu" : "Open menu");
		buttonElement.setAttribute("aria-label", isOpen ? "Close menu" : "Open menu");
		buttonElement.toggleAttribute("aria-expanded", isOpen);
		overlayElement.toggleAttribute("inert");
		externalElements.forEach((element: any) => {
			element.toggleAttribute("inert");
		});
	};

	function bindEvents() {
		var debouncedMatchDevice = debounce(matchDevice, 1000);
		var debouncedRemoveTransition = debounce(removeTransition, 1000);

		buttonElement.addEventListener("click", onButtonClick);
		window.addEventListener("resize", () => {
			var lastWidth = window.innerWidth;
			if (window.innerWidth !== lastWidth) {
				lastWidth = window.innerWidth;
				if (!noTransition) {
					overlayElement.classList.add("no-transition");
					noTransition = true;
				}
				debouncedMatchDevice();
				debouncedRemoveTransition();
			}
		});
	}

	function removeTransition() {
		overlayElement.classList.remove("no-transition");
		noTransition = false;
	}
</script>
